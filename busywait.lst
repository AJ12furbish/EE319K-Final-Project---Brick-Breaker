


ARM Macro Assembler    Page 1 


    1 00000000         ; BusyWait.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         
    5 00000000         ; Runs on TM4C123
    6 00000000         
    7 00000000         ; As part of Lab 7, students need to implement these two
                        functions
    8 00000000         ; This file is in the inc folder so it automatically wil
                       l be applied to labs 7 8 9 and 10
    9 00000000         
   10 00000000         
   11 00000000                 EXPORT           SPIOutCommand
   12 00000000                 EXPORT           SPIOutData
   13 00000000         
   14 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   15 00000000                 THUMB
   16 00000000                 ALIGN
   17 00000000         ; Used in ECE319K Labs 7,8,9,10. You write these two fun
                       ctions
   18 00000000         
   19 00000000         ; ***********SPIOutCommand*****************
   20 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   21 00000000         ; Inputs: R0 = 32-bit command (number)
   22 00000000         ;         R1 = 32-bit SPI status register address
   23 00000000         ;         R2 = 32-bit SPI data register address
   24 00000000         ;         R3 = 32-bit GPIO port address for D/C
   25 00000000         ; Outputs: none
   26 00000000         ; Assumes: SPI and GPIO have already been initialized an
                       d enabled
   27 00000000         ; Note: must be AAPCS compliant
   28 00000000         ; Note: access to bit 6 of GPIO must be friendly
   29 00000000         SPIOutCommand
   30 00000000         ; --UUU-- Code to write a command to the LCD
   31 00000000         ;1) Read the SPI status register (R1 has address) and ch
                       eck bit 4, 
   32 00000000         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   33 00000000         ;3) Clear D/C (GPIO bit 6) to zero, be friendly (R3 has 
                       address)
   34 00000000         ;4) Write the command to the SPI data register (R2 has a
                       ddress)
   35 00000000         ;5) Read the SPI status register (R1 has address) and ch
                       eck bit 4, 
   36 00000000         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   37 00000000 B510            PUSH{R4,         LR}
   38 00000002         step1
   39 00000002 680C            LDR              R4, [R1]    ; Has the status re
                                                            gister
   40 00000004 F014 0410       ANDS             R4, #0x10   ; Isolate bit 4
   41 00000008 D1FB            BNE              step1       ; Check if bit 4 is
                                                             high
   42 0000000A 681C            LDR              R4, [R3]    ; Has GPIO data for
                                                             D/C



ARM Macro Assembler    Page 2 


   43 0000000C F024 0440       BIC              R4, #0x40   ; Clear bit 6
   44 00000010 601C            STR              R4, [R3]    ; Store back to GPI
                                                            O data for D/C
   45 00000012 6010            STR              R0, [R2]    ; Store command int
                                                            o SPI data register
                                                            
   46 00000014         step5
   47 00000014 680C            LDR              R4, [R1]    ; Wait until busy b
                                                            it is low
   48 00000016 F014 0410       ANDS             R4, #0x10
   49 0000001A D1FB            BNE              step5
   50 0000001C E8BD 4010       POP{R4,          LR}
   51 00000020 4770            BX               LR          ;   return
   52 00000022         
   53 00000022         
   54 00000022         
   55 00000022         ; ***********SPIOutData*****************
   56 00000022         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
   57 00000022         ; Inputs: R0 = 32-bit data (number)
   58 00000022         ;         R1 = 32-bit SPI status register address
   59 00000022         ;         R2 = 32-bit SPI data register address
   60 00000022         ;         R3 = 32-bit GPIO port address for D/C
   61 00000022         ; Outputs: none
   62 00000022         ; Assumes: SPI and GPIO have already been initialized an
                       d enabled
   63 00000022         ; Note: must be AAPCS compliant
   64 00000022         ; Note: access to bit 6 of GPIO must be friendly
   65 00000022         SPIOutData
   66 00000022         ; --UUU-- Code to write data to the LCD
   67 00000022         ;1) Read the SPI status register (R1 has address) and ch
                       eck bit 1, 
   68 00000022         ;2) If bit 1 is low, loop back to step 1 (wait for TNF b
                       it to be high)
   69 00000022         ;3) Set D/C (GPIO bit 6) to one, be friendly (R3 has add
                       ress)
   70 00000022         ;4) Write the data to the SPI data register (R2 has addr
                       ess)
   71 00000022 B510            PUSH{R4,         LR}
   72 00000024         checkB1
   73 00000024 680C            LDR              R4, [R1]    ; has contents of S
                                                            PI status register 
                                                            
   74 00000026 F014 0402       ANDS             R4 ,#0x02   ; isolate bit 1 
   75 0000002A D0FB            BEQ              checkB1     ; Keep looping unti
                                                            l bit 1 is high
   76 0000002C 681C            LDR              R4, [R3]    ; has GPIO port dat
                                                            a for D/C
   77 0000002E F044 0440       ORR              R4, #0x40   ; set bit 6 to high
                                                            
   78 00000032 601C            STR              R4, [R3]    ; store new value b
                                                            ack to GPIO port da
                                                            ta for D/C
   79 00000034 6010            STR              R0, [R2]    ; store data to dat
                                                            a register
   80 00000036 E8BD 4010       POP{R4,          LR}
   81 0000003A 4770            BX               LR          ;return
   82 0000003C         ;****************************************************
   83 0000003C         



ARM Macro Assembler    Page 3 


   84 0000003C                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
   85 0000003C                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\busywait.d -o.\busywait.o -I.\RTE\_BrickBreaker -IC:\Users\a
j200\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\aj20
0\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefin
e="__UVISION_VERSION SETA 538" --predefine="_RTE_ SETA 1" --predefine="TM4C123G
H6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\busywait.lst ..\inc\BusyWait.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 14 in file ..\inc\BusyWait.s
   Uses
      None
Comment: .text unused
SPIOutCommand 00000000

Symbol: SPIOutCommand
   Definitions
      At line 29 in file ..\inc\BusyWait.s
   Uses
      At line 11 in file ..\inc\BusyWait.s
Comment: SPIOutCommand used once
SPIOutData 00000022

Symbol: SPIOutData
   Definitions
      At line 65 in file ..\inc\BusyWait.s
   Uses
      At line 12 in file ..\inc\BusyWait.s
Comment: SPIOutData used once
checkB1 00000024

Symbol: checkB1
   Definitions
      At line 72 in file ..\inc\BusyWait.s
   Uses
      At line 75 in file ..\inc\BusyWait.s
Comment: checkB1 used once
step1 00000002

Symbol: step1
   Definitions
      At line 38 in file ..\inc\BusyWait.s
   Uses
      At line 41 in file ..\inc\BusyWait.s
Comment: step1 used once
step5 00000014

Symbol: step5
   Definitions
      At line 46 in file ..\inc\BusyWait.s
   Uses
      At line 49 in file ..\inc\BusyWait.s
Comment: step5 used once
6 symbols
339 symbols in table
